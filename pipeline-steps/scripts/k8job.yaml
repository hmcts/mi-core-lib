name: '$(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

trigger:
  batch: true
  branches:
    include:
      - master

variables:
  #  group: pipeline-env-variables

  environment: 'ithc' #Use test and promoting to stg until prod is ready
  env.upper: 'ITHC'
  azure.subscription.endpoint: 'DTS-SHAREDSERVICES-$(env.upper)'
  azure.aks.cluster: 'ss_aks_$(environment)'
  azureAksResourceGroup:  'ss_$(environment)_kubernetes_resource_group'
  azureAksCluster: 'ss_aks_$(environment)'
stages:
- stage: Execk8
  jobs:
    - job: Execk8
      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: $(environment)
      steps:
        - template: ../templates/steps/aks-authenticate.yaml
          parameters:
            azureSubscriptionEndpoint: $(azure.subscription.endpoint)
            azureAksResourceGroup:  $(azureAksResourceGroup)
            azureAksCluster:  $(azureAksCluster)
        # - task: AzureCLI@1
        #   displayName: "AKS list identities"
        #   inputs:
        #     azureSubscription: $(azure.subscription.endpoint)
        #     scriptLocation: "inlineScript"
        #     inlineScript: kubectl get AzureIdentity --all-namespaces -o yaml
        # - task: AzureCLI@1
        #   displayName: "AKS list identity bindings"
        #   inputs:
        #     azureSubscription: $(azure.subscription.endpoint)
        #     scriptLocation: "inlineScript"
        #     inlineScript: kubectl get AzureIdentityBinding --all-namespaces -o yaml
        # - task: AzureCLI@1
        #   displayName: "AKS get assigned identities"
        #   inputs:
        #     azureSubscription: $(azure.subscription.endpoint)
        #     scriptLocation: "inlineScript"
        #     inlineScript: kubectl get AzureAssignedIdentities --all-namespaces -o yaml
        - task: AzureCLI@1
          displayName: "AKS execute job"
          inputs:
            azureSubscription: $(azure.subscription.endpoint)
            scriptLocation: "inlineScript"
            inlineScript: |
              kubectl get cronjobs -n mi
              # kubectl create job --from=cronjob/data-extractor-test-job  data-extractor-test-job-test-job-manual-$(Build.BuildId) -n mi
              kubectl create job --from=cronjob/mi-integration-service-test-job  mi-integration-service-test-job-manual-$(Build.BuildId) -n mi
              # kubectl create job --from=cronjob/mi-extraction-service-test-job  mi-extraction-service-test-job-manual-$(Build.BuildId) -n mi

