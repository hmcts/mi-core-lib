name: 'Build And Set Secret String $(SourceBranchName)-$(Build.SourceVersion) Build-$(Build.BuildId)'

parameters:
  - name: env
    displayName: Environment to deploy
    type: string
    default: sbox
    values:
      - sbox
      - dev
      - test
      - stg
      - ithc
      - prod
  - name: vaultSecretName
    displayName: Secret name to set in vault
    type: string
  - name: vaultSecretValue
    displayName: Secret value to construct and set in vault. Use %s for placeholders.
    type: string
    default: "User=%s;Pass='%s';"
  - name: substitutions
    displayName: Comma separated values to replace in the secret value. Use [vault]vaultSecretName to pull value from vault.
    type: string
    default: "user,[vault]pass-secret-name"

trigger: none
pr: none

stages:
  - stage: BuildAndSetSecretString
    jobs:
      - job: 'BuildAndSetSecretString_${{ parameters.env }}'
        pool: hmcts-ss-${{ parameters.env }}
        steps:
          - task: AzureCLI@1
            displayName: "Build and set secret into vault"
            inputs:
              azureSubscription: 'DTS-SHAREDSERVICES-${{ upper(parameters.env) }}'
              scriptLocation: "inlineScript"
              inlineScript: |
                vaultName="mi-vault-${{ parameters.env }}"
                formatValue=''
                IFS=',' read -r -a substitutions <<< "${{ parameters.substitutions }}"
                for placeholder in "${substitutions[@]}"
                do
                  if [[ $placeholder == "[vault]"* ]]
                  then
                    placeholderVaultValue=$(az keyvault secret show --vault-name $vaultName --name ${placeholder:7} --query 'value' -o tsv)
                    formatValue="$formatValue $placeholderVaultValue"
                  else
                    formatValue="$formatValue $placeholder"
                  fi
                done
                printf -v vaultSecret "${{ parameters.vaultSecretValue }}" $formatValue
                az keyvault secret set --name ${{ parameters.vaultSecretName }} --vault-name $vaultName --value "$vaultSecret"
