parameters:
- name: subscriptionEndpoint
  type: string
- name: adfName
  type: string
- name: resourceGroup
  type: string
  default: mi-$(environment)-rg
- name: adfOverrideParameters
  type: string
- name: adfFolder
  type: string
  default: ./
- name: env
  type: string
  default: $(environment)
- name: agentPool
  type: string
  default: hmcts-ss-$(environment)
- name: artifactName
  type: string
  default: 'ArmTemplates'
- name: enableTriggers
  type: boolean
  default: false
- name: disabledTriggers #List of disabled triggers separated by comma
  type: string
  default: ''

jobs:
- deployment: deploy_adf
  displayName: 'Deploy to Azure Data Factory'
  pool: ${{ parameters.agentPool }}

  variables:
    packageWheelName: 'none'
  environment: ${{ parameters.env }}
  strategy:
    runOnce:
      deploy:
        steps:
        - task: CmdLine@2
          displayName: 'Prepare Az environment'
          inputs:
            script: |
              pwsh --command Install-Module -Name Az.Accounts -RequiredVersion 2.6.1 -AllowClobber -Force
              pwsh --command Install-Module -Name Az.DataFactory -RequiredVersion 1.16.0 -AllowClobber -Force
        - task: Powershell@2
          displayName: Check Global Parameters Existence
          inputs:
            targetType: 'inline'
            script: |
              $globalParametersExist = Test-Path -Path "$(Pipeline.Workspace)/ArmTemplates/${{ parameters.adfName }}_GlobalParameters.json"
              Write-Output "##vso[task.setvariable variable=GlobalParametersExist]$globalParametersExist"
        - task: AzurePowerShell@4
          displayName: 'Azure Powershell script: Save Existing RepoConfiguration'
          condition: eq(variables['GlobalParametersExist'], True)
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            scriptType: inlineScript
            inline: |
              $repoConfiguration = Get-AzDataFactoryV2 -ResourceGroupName "${{ parameters.resourceGroup }}" -Name "${{ parameters.adfName }}" | Select-Object -ExpandProperty RepoConfiguration
              Write-Output "##vso[task.setvariable variable=RepoConfigurationAccountName]$($repoConfiguration.AccountName)"
              Write-Output "##vso[task.setvariable variable=RepoConfigurationRepositoryName]$($repoConfiguration.RepositoryName)"
              Write-Output "##vso[task.setvariable variable=RepoConfigurationCollaborationBranch]$($repoConfiguration.CollaborationBranch)"
              Write-Output "##vso[task.setvariable variable=RepoConfigurationRootFolder]$($repoConfiguration.RootFolder)"
            azurePowerShellVersion: LatestVersion
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Update global parameters'
          condition: eq(variables['GlobalParametersExist'], True)
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            ScriptPath: '$(Pipeline.Workspace)/ArmTemplates/GlobalParametersUpdateScript.ps1'
            ScriptArguments: '-globalParametersFilePath "$(Pipeline.Workspace)/ArmTemplates/${{ parameters.adfName }}_GlobalParameters.json" -resourceGroupName "${{ parameters.resourceGroup }}" -dataFactoryName "${{ parameters.adfName }}"'
            azurePowerShellVersion: LatestVersion
        - task: AzurePowerShell@4
          displayName: 'Azure Powershell script: Restore Existing HMCTS RepoConfiguration'
          condition: and(eq(variables['GlobalParametersExist'], True), eq(variables['RepoConfigurationAccountName'], 'hmcts'))
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            scriptType: inlineScript
            inline: |
              Get-AzDataFactoryV2 -ResourceGroupName "${{ parameters.resourceGroup }}" -Name "${{ parameters.adfName }}" | Set-AzDataFactoryV2 -HostName "https://github.com" -AccountName "$(RepoConfigurationAccountName)" -RepositoryName "$(RepoConfigurationRepositoryName)" -CollaborationBranch "$(RepoConfigurationCollaborationBranch)" -RootFolder "$(RepoConfigurationRootFolder)" -Force
            azurePowerShellVersion: LatestVersion
        - task: AzurePowerShell@4
          name: deactivateTriggers
          displayName: 'Temporarily deactivate triggers'
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            azurePowerShellVersion: LatestVersion
            scriptType: 'inline'
            inline: |
                $triggersADF = Get-AzDataFactoryV2Trigger -DataFactoryName "${{ parameters.adfName }}" -ResourceGroupName "${{ parameters.resourceGroup }}"
                $activeTriggers = [System.Collections.ArrayList]@()
                $triggersADF | ForEach-Object {
                  if($_.RuntimeState -match 'Started'){
                    $activeTriggers.Add($_.name)
                    Stop-AzDataFactoryV2Trigger -ResourceGroupName "${{ parameters.resourceGroup }}" -DataFactoryName "${{ parameters.adfName }}" -Name $_.name -Force
                    Write-Host("Temporarily deactivating trigger :::", $_.name)
                  }
                }
                Write-Output "##vso[task.setvariable variable=activeTriggers;isOutput=true]$activeTriggers.ToArray()"
        - task: AzureResourceGroupDeployment@2
          displayName: 'Azure Deployment:Create Or Update Resource Group action on ${{ parameters.resourceGroup }}'
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            resourceGroupName: ${{ parameters.resourceGroup }}
            location: '$(azureLocation)'
            csmFile: '$(Pipeline.Workspace)/ArmTemplates/ARMTemplateForFactory.json'
            csmParametersFile: '$(Pipeline.Workspace)/ArmTemplates/ARMTemplateParametersForFactory.json'
            overrideParameters: -factoryName ${{ parameters.adfName }} ${{ parameters.adfOverrideParameters }}
        - task: AzurePowerShell@4
          displayName: 'Enable or Disable Pipeline Triggers'
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            azurePowerShellVersion: LatestVersion
            scriptType: 'inline'
            inline: |
              $triggersADF = Get-AzDataFactoryV2Trigger -DataFactoryName "${{ parameters.adfName }}" -ResourceGroupName "${{ parameters.resourceGroup }}"
              $disabledTriggersList = "${{ parameters.disabledTriggers }}" -split ","
              
              $triggersADF | ForEach-Object {
                if (("${{ parameters.enableTriggers }}" -eq "true") -And (-Not $disabledTriggersList.Contains($_.name))) {
                  Start-AzDataFactoryV2Trigger -ResourceGroupName "${{ parameters.resourceGroup }}" -DataFactoryName "${{ parameters.adfName }}" -Name $_.name -Force
                  Write-Host("Start trigger --> ",$_.name)
                }
                else {
                  Stop-AzDataFactoryV2Trigger -ResourceGroupName "${{ parameters.resourceGroup }}" -DataFactoryName "${{ parameters.adfName }}" -Name $_.name -Force
                  Write-Host("Stop Trigger:::", $_.name)
                }
              }
        - task: AzurePowerShell@4
          name: reactivateTriggers
          displayName: 'Reactivate temporarily deactivated triggers'
          inputs:
            azureSubscription: ${{ parameters.subscriptionEndpoint }}
            azurePowerShellVersion: LatestVersion
            scriptType: 'inline'
            inline: |
                foreach($trigger in $(deactivateTriggers.activeTriggers)){
                  Start-AzDataFactoryV2Trigger -ResourceGroupName "${{ parameters.resourceGroup }}" -DataFactoryName "${{ parameters.adfName }}" -Name $trigger -Force
                  Write-Host("Reactivating trigger :::", $trigger)
                }
