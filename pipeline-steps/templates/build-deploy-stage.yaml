parameters:
  env: 'test'
  promEnv: 'stg'

  applicationName: ''
  chartEnv: 'test'
  product: ''
  azureContainerRegistry: $(azure.container.registry)
  azureAksCluster: $(azure.aks.cluster)
  azureSubscriptionEndpoint: $(azure.subscription.endpoint)
  azureAksResourceGroup: $(azure.aks.resourcegroup)
  azurePromAcr: $(azure.prom.acr)
  azurePromSubscriptionEndpoint: $(azure.prom.subscription.endpoint)
  azureKeyMapping: {}
  azureSecreKeys: '*' # coma separated azure keys
  azureVault: ''
  preIntegrationTest: false
  postIntegrationTest: true
  functionalTest: false
  mutationTest: false
  helmRepo: 'hmctspublic'
  ithcEnv: 'ithc'
  ithcAcr: 'ssprivateithc'
  ithcSubscriptionEndpoint: 'DTS-SHAREDSERVICES-ITHC'
  
stages:
- stage: BuildAndDeploy
  jobs:
    - job: BuildAndTestApplication
      # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        aptDependencies: 'qtbase5-dev'
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/sonar-pr-option.yaml
        - template: ./steps/gradle-task.yaml
          parameters:
            checkstyle: true
            pmd: true
            gradleTasks: 'build'
            testRunTitle: 'Unit tests'
            displayName: 'Package application'
            publishJUnitResults: true
            extraOptions: '--build-cache'
        - ${{ if eq(parameters.functionalTest, 'true') }}:
          - template: ./steps/acr-login.yaml
            parameters:
              azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
              azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
              azureAksCluster:  ${{ parameters.azureAksCluster }}
              azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
          - template: ./steps/gradle-task.yaml
            parameters:
              gradleTasks: 'functional'
              testRunTitle: 'Functional tests'
              displayName: 'Functional test'
              publishJUnitResults: true
              testResultsFiles: '**/test-results/functional/**/TEST-*.xml'
              extraOptions: '--build-cache'
        - template: ./steps/gradle-task.yaml
          parameters:
            gradleTasks: 'pitest'
            displayName: 'Pitest analysis'
            extraOptions: '--build-cache'
            execute: ${{ parameters.mutationTest }}
        - task: PublishPipelineArtifact@1
          condition: succeededOrFailed()
          inputs:
            path: '$(System.DefaultWorkingDirectory)/build/reports/'
            artifact: reports
            displayName: 'Publish reports on artifact'
        - template: ./steps/gradle-task.yaml
          parameters:
            gradleTasks: 'sonarqube'
            displayName: 'Sonar analysis'
            extraOptions: '--build-cache -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$(sonarcloud-api-token) -Dsonar.organization=hmcts $(sonarPr)'
        - template: ./steps/publish-artifact.yaml
        - template: ./docker-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            applicationName:  ${{ parameters.applicationName }}

    - job: DeployBuild
      dependsOn: BuildAndTestApplication
      condition: succeeded()
      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/vault-secrets.yaml
          parameters: 
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            keyVaultName: ${{ parameters.azureVault }}
            secretsFilter: ${{ parameters.azureSecreKeys }}
        - template: ./steps/gradle-task.yaml
          parameters:
            azureKeyMapping: ${{ parameters.azureKeyMapping }}
            displayName: 'Run Pre Integration Test Setup'
            gradleTasks: 'integrationPreTest'
            execute: ${{ parameters.preIntegrationTest }}
        - template: ./helm-install-chart-job.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            applicationName:  ${{ parameters.applicationName }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace: ${{ parameters.product }}
            chartEnv: ${{ parameters.chartEnv }}
            helmRepo: ${{ parameters.helmRepo }}
        - template: ./kubernetes-wait-for-job.yaml
          parameters:
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace:  ${{ parameters.product }}
            projectName: ${{ parameters.applicationName }}
    
    - job: IntegrationTest
      dependsOn: DeployBuild
      condition: succeeded()
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/vault-secrets.yaml
          parameters: 
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            keyVaultName: ${{ parameters.azureVault }}
            secretsFilter: ${{ parameters.azureSecreKeys }}
        - template: ./steps/gradle-task.yaml
          parameters:
            displayName: 'Run Integration Test'
            azureKeyMapping: ${{ parameters.azureKeyMapping }}
            testResultsFiles: '**/test-results/integrationPostTest/**/TEST-*.xml'
            gradleTasks: 'integrationPostTest'
            publishJUnitResults: true
            testRunTitle: 'Integration test'
        - template: ./steps/helm-delete-chart.yaml
          parameters:
            displayName: 'Delete deployment'
            jobName:  ${{ parameters.applicationName }}
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            namespace: ${{ parameters.product }}
    - job: PromoteBuildIthc
      dependsOn: IntegrationTest
      condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/ithc'), ne(variables['Build.Reason'], 'Schedule')))

      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}

      steps:
        - template: ./promote-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
            azureDestinyContainerRegistry:  ${{ parameters.ithcAcr }}
            azureProdSubscription: ${{ parameters.ithcSubscriptionEndpoint }}
            promEnv: ${{ parameters.ithcEnv }}
    - job: PromoteBuild
      dependsOn: IntegrationTest
      condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'Schedule')))

      pool:
        vmImage: 'Ubuntu-16.04'
      variables:
        env: ${{ parameters.env }}

      steps:
        - template: ./promote-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
            azureDestinyContainerRegistry:  ${{ parameters.azurePromAcr }}
            azureProdSubscription: $(azure.prom.subscription.endpoint)
            promEnv: ${{ parameters.promEnv }}
