parameters:
  env: 'test'
  promEnv: 'stg'

  applicationName: ''
  chartEnv: 'test'
  product: ''
  azureContainerRegistry: 'sdshmctspublic.azurecr.io'
  azureContainerRegistrySubscription: 'DTS-SHAREDSERVICES-PROD'
  azureAksCluster: $(azure.aks.cluster)
  azureSubscriptionEndpoint: $(azure.subscription.endpoint)
  azureAksResourceGroup: $(azure.aks.resourcegroup)
  azurePromAcr: 'sdshmctspublic'
  azurePromSubscriptionEndpoint: 'DTS-SHAREDSERVICES-PROD'
  azureKeyMapping: {}
  envMapping: {}
  azureSecreKeys: '*' # coma separated azure keys
  azureVault: ''
  dependencyCheck: true
  preIntegrationTest: false
  postIntegrationTest: true
  functionalTest: false
  mutationTest: false
  helmRepo: 'sdshmctspublic'
  ithcEnv: 'ithc'
  agentPool: hmcts-ss-sandbox
  jobTimeout: 900
  fortifyTechnologyStack: 'JAVA/J2EE/Kotlin'
  fortifyTechnologyVersion: '11'
  
stages:
- stage: BuildAndDeploy
  jobs:
    - job: BuildAndTestApplication
      # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

      pool:
        vmImage: 'Ubuntu-latest'
      variables:
        aptDependencies: 'qtbase5-dev'
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/sonar-pr-option.yaml
        - template: ./steps/dependency-check.yaml
          parameters:
            execute: ${{ parameters.dependencyCheck }}
        - template: ./steps/gradle-task.yaml
          parameters:
            checkstyle: true
            pmd: true
            gradleTasks: 'build'
            testRunTitle: 'Unit tests'
            displayName: 'Package application'
            publishJUnitResults: true
            extraOptions: '--build-cache'
        - ${{ if eq(parameters.functionalTest, 'true') }}:
          - template: ./steps/acr-login.yaml
            parameters:
              azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
              azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
              azureAksCluster:  ${{ parameters.azureAksCluster }}
              azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
              azureContainerRegistrySubscription: ${{ parameters.azureContainerRegistrySubscription }}
          - template: ./steps/gradle-task.yaml
            parameters:
              gradleTasks: 'functional'
              testRunTitle: 'Functional tests'
              displayName: 'Functional test'
              publishJUnitResults: true
              testResultsFiles: '**/test-results/functional/**/TEST-*.xml'
              extraOptions: '--build-cache'
        - template: ./steps/gradle-task.yaml
          parameters:
            gradleTasks: 'pitest'
            displayName: 'Pitest analysis'
            extraOptions: '--build-cache'
            execute: ${{ parameters.mutationTest }}
        - task: PublishPipelineArtifact@1
          condition: succeededOrFailed()
          inputs:
            path: '$(System.DefaultWorkingDirectory)/build/reports/'
            artifact: reports
            displayName: 'Publish reports on artifact'
        - template: ./steps/gradle-task.yaml
          parameters:
            gradleTasks: 'sonarqube'
            displayName: 'Sonar analysis'
            extraOptions: '--no-daemon --build-cache -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$(sonarcloud-api-token) -Dsonar.organization=hmcts $(sonarPr)'
        - template: ./steps/publish-artifact.yaml
        - template: ./docker-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureContainerRegistrySubscription:  ${{ parameters.azureContainerRegistrySubscription }}
            applicationName:  ${{ parameters.applicationName }}

    - template: ./jobs/fortify-scan-job.yaml
      parameters:
        dependsOn: BuildAndTestApplication
        vaultAgentPool: ${{ parameters.agentPool }}
        azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
        azureVault: ${{ parameters.azureVault }}
        applicationName: ${{ parameters.applicationName }}
        technologyStack: ${{ parameters.fortifyTechnologyStack }}
        technologyVersion: ${{ parameters.fortifyTechnologyVersion }}

    - job: DeployBuild
      dependsOn:
        - BuildAndTestApplication
        - RunFortifyScan
      condition: succeeded()
      pool: ${{ parameters.agentPool }}

      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./add-dependencies.yaml
          parameters:
            aptDependencies: 'gettext'
        - script: |
            apt-get update && apt-get install -y apt-transport-https gnupg2 curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubectl
          displayName: 'add kubectl'
        - template: ./steps/vault-secrets.yaml
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            keyVaultName: ${{ parameters.azureVault }}
            secretsFilter: ${{ parameters.azureSecreKeys }}
        - template: ./steps/gradle-task.yaml
          parameters:
            displayName: 'Run Pre Integration Test Setup'
            azureKeyMapping: ${{ parameters.azureKeyMapping }}
            envMapping: ${{ parameters.envMapping }}
            gradleTasks: 'integrationPreTest'
            execute: ${{ parameters.preIntegrationTest }}
        - template: ./helm-install-chart-job.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            applicationName:  ${{ parameters.applicationName }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace: ${{ parameters.product }}
            chartEnv: ${{ parameters.chartEnv }}
            helmRepo: ${{ parameters.helmRepo }}
        - template: ./kubernetes-wait-for-job.yaml
          parameters:
            azureSubscriptionEndpoint:  ${{ parameters.azureSubscriptionEndpoint }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            jobName:  ${{ parameters.applicationName }}
            namespace:  ${{ parameters.product }}
            projectName: ${{ parameters.applicationName }}
            jobTimeout: ${{ parameters.jobTimeout }}
    
    - job: IntegrationTest
      dependsOn: DeployBuild
      condition: succeeded()
      pool: ${{ parameters.agentPool }}
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/vault-secrets.yaml
          parameters: 
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            keyVaultName: ${{ parameters.azureVault }}
            secretsFilter: ${{ parameters.azureSecreKeys }}
        - template: ./steps/gradle-task.yaml
          parameters:
            displayName: 'Run Integration Test'
            azureKeyMapping: ${{ parameters.azureKeyMapping }}
            envMapping: ${{ parameters.envMapping }}
            publishJUnitResults: true
            testResultsFiles: '**/test-results/integrationPostTest/**/TEST-*.xml'
            gradleTasks: 'integrationPostTest'
            testRunTitle: 'Integration test'
        - task: PublishPipelineArtifact@1
          condition: succeededOrFailed()
          inputs:
            path: '$(System.DefaultWorkingDirectory)/build/reports/tests/integrationPostTest'
            artifact: integrationTest
            displayName: 'Publish integration test report'

    - job: CleanResources
      dependsOn: IntegrationTest
      condition: always()
      pool: ${{ parameters.agentPool }}
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./steps/helm-delete-chart.yaml
          parameters:
            displayName: 'Delete deployment'
            jobName:  ${{ parameters.applicationName }}
            azureSubscriptionEndpoint: ${{ parameters.azureSubscriptionEndpoint }}
            azureAksResourceGroup:  ${{ parameters.azureAksResourceGroup }}
            azureAksCluster:  ${{ parameters.azureAksCluster }}
            namespace: ${{ parameters.product }}
            
    - job: PromoteBuildIthc
      dependsOn: IntegrationTest
      condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/ithc'), ne(variables['Build.Reason'], 'Schedule')))

      pool:
        vmImage: 'Ubuntu-latest'
      variables:
        env: ${{ parameters.env }}
      steps:
        - template: ./promote-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
            azureDestinyContainerRegistry:  ${{ parameters.azureContainerRegistry }}
            azureProdSubscription: ${{ parameters.azureContainerRegistrySubscription }}
            promEnv: ${{ parameters.ithcEnv }}
    - job: PromoteBuild
      dependsOn: IntegrationTest
      condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'Schedule')))

      pool:
        vmImage: 'Ubuntu-latest'
      variables:
        env: ${{ parameters.env }}

      steps:
        - template: ./promote-build.yaml
          parameters:
            azureContainerRegistry: ${{ parameters.azureContainerRegistry }}
            applicationName: ${{ parameters.applicationName }}
            azureDestinyContainerRegistry:  ${{ parameters.azurePromAcr }}
            azureProdSubscription: $(azure.prom.subscription.endpoint)
            promEnv: ${{ parameters.promEnv }}
