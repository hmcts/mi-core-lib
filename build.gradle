plugins {
	id 'checkstyle'
	id 'pmd'
	id 'jacoco'
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java-library'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'org.owasp.dependencycheck' version '5.2.4'
	id 'com.github.ben-manes.versions' version '0.27.0'
	id 'org.sonarqube' version '2.8'
	id 'info.solidsoft.pitest' version '1.5.1'
}

group = 'uk.gov.hmcts.reform.mi'
version = '3.3.0'
sourceCompatibility = '11'

bootJar {
	enabled = false
}

jar {
	enabled = true
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

checkstyle {
	maxWarnings = 0
	toolVersion = '8.24'
	// need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
	configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
	toolVersion = "6.18.0"
	sourceSets = [sourceSets.main, sourceSets.test]
	reportsDir = file("$project.buildDir/reports/pmd")
	// https://github.com/pmd/pmd/issues/876
	ruleSets = []
	ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
	executionData(test)
	reports {
		xml.enabled = true
		csv.enabled = false
		xml.destination file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
		html.destination file("${buildDir}/reports/jacoco/jacocoTestReport.html")
	}
}

project.tasks['sonarqube'].dependsOn test

def sonarExclusions = [
	'**uk/gov/hmcts/reform/mi/micore/MiCoreLibConfigurationContext.java',
	'**uk/gov.hmcts/reform/mi/micore/utils/AzureWrapper.java'
]

sonarqube {
	properties {
		property "sonar.projectName", "Reform :: MI Core Library"
		property "sonar.projectKey", "uk.gov.hmcts.reform:mi-core-lib"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoTestReport.xml"
		property "sonar.exclusions", sonarExclusions.join(", ")
	}
}

dependencyUpdates.resolutionStrategy {
	componentSelection { rules ->
		rules.all {
			def isNonStable = { String version ->
				['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
					version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
				}
			}
			if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
				selection.reject('Release candidate')
			}
		}
	}
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
	// Specifies if the build should be failed if a CVSS score above a specified level is identified.
	// range of 0-10 fails the build, anything greater and it doesn't fail the build
	failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
	suppressionFile = 'config/owasp/suppressions.xml'
}

task sourcesJar(type: Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

def gitRepo = "https://github.com/hmcts/mi-core-lib"

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom {
				name = 'mi-core-lib'
				description = 'HMCTS Management Information Core Libraries and Utilities'
				url = gitRepo
				licenses {
					license {
						name = 'MIT License, Copyright (c) 2019 HM Courts & Tribunals Service'
						url = "http://www.opensource.org/licenses/mit-license.php"
					}
				}
				scm {
					url = gitRepo
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_KEY')
	publications = ['mavenJava']
	publish = true
	pkg {
		repo = 'hmcts-maven'
		name = 'mi-core-lib'
		userOrg = 'hmcts'
		licenses = ['MIT']
		vcsUrl = gitRepo
		version {
			name = project.version
		}
	}
}

repositories {
	mavenLocal()
	jcenter()
	mavenCentral()
	maven {
		url "https://dl.bintray.com/hmcts/hmcts-maven"
	}
}

ext {
	set('azureVersion', "2.2.0")
}

dependencyManagement {
	dependencies {
		dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.64'
		// CVE-2018-10237 - Unbounded memory allocation
		dependencySet(group: 'com.google.guava', version: '28.1-jre') {
			entry 'guava'
		}
	}
	imports {
		mavenBom "com.microsoft.azure:azure-spring-boot-bom:${azureVersion}"
	}
}

def versions = [
	azureCore     : '1.5.1',
	azureIdentity : '1.0.7',
	azureStorage  : '12.6.1',
	junit         : '5.5.2',
	lombok        : '1.18.10',
	mockito       : '3.2.4',
	openCsv       : '5.0',
	piTest        : '1.5.1',
	piTestGradle  : '1.4.7',
	piTestSonar   : '0.5',
	reformLogging : '5.1.1'
]

dependencies {
	// Spring Boot Initial Dependencies
	implementation 'com.microsoft.azure:azure-active-directory-spring-boot-starter'
	implementation 'com.microsoft.azure:azure-keyvault-secrets-spring-boot-starter'
	implementation 'com.microsoft.azure:azure-spring-boot-starter'
	implementation 'com.microsoft.azure:azure-storage-spring-boot-starter'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	// Azure Dependencies - Transitive
	api group: 'com.azure', name: 'azure-core', version: versions.azureCore
	api group: 'com.azure', name: 'azure-storage-blob', version: versions.azureStorage
	api group: 'com.azure', name: 'azure-storage-common', version: versions.azureStorage
	api group: 'com.azure', name: 'azure-identity', version: versions.azureIdentity

	// CSV Dependencies
	implementation group: 'com.opencsv', name: 'opencsv', version: versions.openCsv

	// Lombok
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
	implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

	// Reform Dependencies
	implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
	implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging

	// Test Dependencies
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
	testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

	testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: versions.mockito

	testImplementation group: 'org.pitest', name: 'pitest', version: versions.piTest
	testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.piTestGradle
	testImplementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.piTestSonar
}

test {
	useJUnitPlatform()
}

pitest {
	targetClasses = ['uk.gov.hmcts.reform.mi.micore.component.*',
					 'uk.gov.hmcts.reform.mi.micore.exception.*',
					 'uk.gov.hmcts.reform.mi.micore.factory.*',
					 'uk.gov.hmcts.reform.mi.micore.utils.AuthTokenUtils*']
	testSourceSets = [sourceSets.test]
	threads = 10
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
	mutationThreshold = 80
	verbose = true
	junit5PluginVersion = '0.12'
}
